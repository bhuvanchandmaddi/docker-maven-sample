pipeline {
  agent any
    environment{
		// CD_CONFIG_DIR= 'cd_config'
        // DEVOPS_CONFIG_FILE = 'apm-blik-devops-config.yaml'
        // NAMESPACE = 'bmaddi'
        // BRANCH= "main"
        // CHECKOUT_CD = "continious-delivery"
        // APP_CONFIG_REPO_URL="https://github.com/bhuvanchandmaddi/docker-maven-sample.git"
        registry = "bmaddi/sample-springboot-app"

    }
    parameters {
        string (
                defaultValue: '',
                description: 'Enter image tag id',
                name: 'image_tag'
        )
       choice(
              choices: ['No', 'Yes'], 
              description: 'Choose Yes to restart pods',
              name: 'pod_restart'
          )		
    }
    stages {

		// stage('Checkout Application Config'){
        //     steps{
		// 		script{
		// 			checkout([
		// 				$class: 'GitSCM',
		// 				branches: [[name: env.BRANCH ]],
		// 					doGenerateSubmoduleConfigurations: false,
		// 					extensions: 
		// 					[
		// 						[$class: 'RelativeTargetDirectory', relativeTargetDir: env.CD_CONFIG_DIR],
		// 						[$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path: env.CHECKOUT_CD]]]
		// 					], 
		// 					submoduleCfg: [],
		// 					userRemoteConfigs: [[url: env.APP_CONFIG_REPO_URL ]]])
		// 		}
		// 	}					
		// }
        stage('Docker Pull')
        {
            steps
            {
                script
                {
				    IMAGE = "$registry:$image_tag"
                    withDockerRegistry(credentialsId: 'docker-hub-creds', url: '')                    
                    {
                        docker.image(IMAGE).pull()
                    }
                }
            }
        }

       
        stage('Install service') { 
            steps {
                        script{
                          sh '''
			  export KUBECONFIG=/path/to/updated_kubeconfig
                          helm upgrade --insecure-skip-tls-verify --install springbootapp  continious-delivery/helmcharts/sprint-boot-app -f continious-delivery/external-config.yaml --set image.tag=${image_tag}
			  '''
                        }      
            }
        }
    }
    post { 
        always { 
			sh "docker rmi $IMAGE | true"
            cleanWs()
        }
    }    
}
